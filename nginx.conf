# Take note of http://wiki.nginx.org/Pitfalls

#user  www;
worker_processes  2;

#load_module "modules/ngx_stream_module.so";

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#error_log  syslog:server=unix:/dev/log,severity=notice;

#pid        logs/nginx.pid;

worker_rlimit_nofile 1024;
events {
    worker_connections  800;
}


http {
    include       mime.types;
    default_type  application/octet-stream;
    index         index.html index.htm;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    #access_log  syslog:server=unix:/dev/log,severity=notice main;

    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    server_tokens off;

    server {
        listen       80;
        listen       [::]:80;
        server_name  localhost;
        root         /var/www/htdocs;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
      #  error_page   500 502 503 504  /50x.html;
      #  location = /50x.html {
      #      root  /var/www/htdocs;
      #  }

        # FastCGI to CGI wrapper server
        #
        #location /cgi-bin/ {
        #    fastcgi_pass   unix:run/slowcgi.sock;
        #    fastcgi_split_path_info ^(/cgi-bin/[^/]+)(.*);
        #    fastcgi_param  PATH_INFO $fastcgi_path_info;
        #    include        fastcgi_params;
        #}

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on unix socket
        #
        #location ~ \.php$ {
        #    try_files      $uri $uri/ =404;
        #    fastcgi_pass   unix:run/php-fpm.sock;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    server {
        listen       80;
        #listen       somename:8080;
        server_name  example.fr  www.example.fr;
    #    root         /var/www/htdocs;
        return 301 https://$server_name$request_uri;
    }


    # HTTPS server
    #
    server {
        listen       443;
        server_name  example.fr www.example.fr;
      #  root         /var/www/htdocs;
	gzip off;
        ssl                  on;
        ssl_certificate      /etc/ssl/fullchain.pem;
        ssl_certificate_key  /etc/ssl/private/privkey.pem;
	ssl_trusted_certificate /etc/ssl/ca-intermediate.pem;
	ssl_dhparam /etc/ssl/dhparams.pem;
	ssl_protocols TLSv1.2;
        ssl_session_timeout  5m;
        ssl_session_cache    shared:SSL:1m;
	#ssl_ciphers EECDH+CHACHA20:EECDH+AESGCM;
	ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:AES256+EECDH:AES256+EDH:!aNULL;
	ssl_ecdh_curve X25519:P-521:P-384:P-256;
	ssl_stapling on;
	ssl_stapling_verify on;
        ssl_prefer_server_ciphers   on;
	#Do not activate nginx resolver (cache poisoning attack) see http://blog.zorinaq.com/nginx-resolver-vulns/

    # These headers t protect against Cross-site scripting (XSS)
   add_header X-XSS-Protection "1; mode=block";
   add_header Referrer-Policy "no-referrer";
   add_header X-Content-Type-Options nosniff;
   add_header X-Frame-Options SAMEORIGIN;
   add_header Public-Key-Pins 'pin-sha256="slfGw+w+LVqRL/5tDhu1/mCoUKiOEvuUsJhDovbR+1U="; pin-sha256="TqtvbL6EXyRVLliNtoNf0siv6Bz3RvcmMTCAVM5HahE="; max-age=5184000; includeSubDomains';
   #Example Content Security Policy, modify according to your needs
   add_header Content-Security-Policy-Report-Only "default-src 'self' https://www.youtube.com https://fonts.googleapis.com; script-src 'self' 'unsafe-inline' https://googleads.g.doubleclick.net https://www.youtube.com https://s.ytimg.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; img-src 'self'; font-src 'self' https://fonts.gstatic.com https://fonts.googleapis.com; media-src 'self' https://www.youtube.com; report-uri https://www.example.fr/report.php";
   # This will enforce HTTP browsing into HTTPS and avoid ssl stripping attack
   add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";

        location / {
    	   proxy_set_header Host $host;
    	   proxy_set_header X-Real-IP $remote_addr;
 	   proxy_pass http://192.168.1.11:80;
	}
        location /toto {
    	   proxy_set_header Host $host;
    	   proxy_set_header X-Real-IP $remote_addr;
 	   proxy_pass http://192.168.1.11:8080;
	}
        location /tata {
    	   #proxy_set_header Host $host;
    	   #proxy_set_header X-Real-IP $remote_addr;
 	   proxy_pass http://192.168.1.12:8080;
	}
        location /titi {
    	   #proxy_set_header Host $host;
    	   #proxy_set_header X-Real-IP $remote_addr;
 	   proxy_pass http://192.168.1.13:8080;
	}
    }


}
